Programmed by ahhhh6980 ; https://github.com/ahhhh6980


check config.ini for configuration; backup.ini is a backup of defaults
make sure you have Python 3.x, NUMPY, PIL, and configparser installed


to run, simply run the file through a terminal and it will update you on it's progress
$ python newFractalGen.py


One thing I found is that you can generate a black and white image of the fractal at half the resolution
and you can use that to only compute pixels that are not black, which can lead to 40% increase in speed
but you suffer a small loss in quality at the immediate border of the fractal. Though with larger resolutions
it starts to become unnoticeable to be honest.


If the script runs into an error, it should save to the root directory under "TERMINATED.png"
Debug mode just renders black pixels and should be used to help figure out issues with image size and etc


Info about the hardcoded defaults;

z -> z^2 + c
MANDELBROT;
	cScale = 0.5
    lightnessExponent = 1.5
    colorExponent = 0.4
    l = 2500
    zoom = 0.7
    ratio = [ 4, 3.5 ]
    position = complex( -0.25, 0.5 )

z -> |z|^2 + c
BURNING SHIP;
	cScale = 0.75
    cOffset = 90
    lightnessExponent = 2.0
    lightnessScale = 2
    colorExponent = 0.4
    zoom = 55
    ratio = [ 3, 6 ]
    position = complex( -1.124, 0.4685 )

JULIA;
	zoom = 0.7
    position = complex( 0.5, 0.5 )
    l = 2500
    colorExponent = 0.15 * (cScale/2)
    ratio = [ 3, 3 ]

My favorite (Took me a while to find)
c -> c + 2 + tan(c)/tan(z)
z -> (z/c)^e + c^z
SPECIAL FRACTAL:
    theta = 90
    angle = (theta * np.pi) / 180
    position = complex(  -250, 0.5 )
    limit = 1000
    zoom = 0.004
    imageDiv = 4
    resolution = 10
    ratio = [3,4]
    fancyColors = 0
    cScale = 2
    cOffset = 0.5
    colorExponent = 0.05
    lightnessExponent = 2
    lightnessScale = 1
    
